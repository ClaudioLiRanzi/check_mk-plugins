#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#################################################################
#---------------------------------------------------------------#
# Author: Markus Weber                                          #
# Contact: markus.weber@lfst.bayern.de                          #
# License: GPL                                                  #
# File: slapd_stats                                             #
# Version: 1.1.3                                                #
# Revision: 19.10.2017                                          #
# Description: This check monitors the state of power supply    #
# units via idarc mib (IDRAC-MIB-SMIv2.mib) of Dell PowerEdge   #
# Servers.                                                      #
#                                                               #
#################################################################

# from idrac-smiv2.mib
#
#--
#-- Status
#--
#ObjectStatusEnum        ::= TEXTUAL-CONVENTION
#    STATUS current
#    DESCRIPTION
#        "Status of an object."
#    SYNTAX              INTEGER {
#    other(1),           -- the status of the object is not one of the
#                        --  following:
#    unknown(2),         -- the status of the object is unknown
#                        --  (not known or monitored)
#    ok(3),              -- the status of the object is ok
#    nonCritical(4),     -- the status of the object is warning, non-critical
#    critical(5),        -- the status of the object is critical (failure)
#    nonRecoverable(6)   -- the status of the object is non-recoverable (dead)
#}

def inventory_dell_idrac_powersupplies(info):
    inventory = []
    powerSupply_info, amperageProbe_info = info
    for PSUCidx, PSUSidx, PSUstatus, PSUName, PSUvoltage in powerSupply_info:
        for line in powerSupply_info:
            item = "Chassis-%s-Slot-%s" % (line[0], line[1])
            inventory.append( ( item, None ) )

    return inventory

def check_dell_idrac_powersupplies(item, _no_params, info):
    state = 0
    infotext = ""
    perfdata = []
    tries = []

    try:
        powerSupply_info, amperageProbe_info = info
        for PSUCidx, PSUSidx, PSUstatus, PSUName, PSUvoltage in powerSupply_info:
            for Avalue, Atype, AName in amperageProbe_info:
                if PSUvoltage == '':
                    PSUvoltage = "230" # assume 230 volt for Hosts that are not providing the volt value

                if item == "Chassis-%s-Slot-%s" % (PSUCidx, PSUSidx) and PSUName.split()[0] == AName.split()[0]:
                    workmode = 2
                elif item == "Chassis-%s-Slot-%s" % (PSUCidx, PSUSidx):
                    workmode = 1
                else:
                    workmode = 0

                if workmode >= 2:
                    if Atype == "23": #amperageProbeTypeIsPowerSupplyAmps(23),     -- type is Power Supply probe with reading in Amps
                        Watts = int(Avalue)/10.0 * int(PSUvoltage)
                    elif Atype == "24": #amperageProbeTypeIsPowerSupplyWatts(24),    -- type is Power Supply probe with reading in Watts
                        Watts = int(Avalue)
                    else:
                        Watts = 0
                else:
                    Watts = 0

                if workmode >= 1:
                    if PSUstatus == "5" or PSUstatus == "6":
                        state = max(state,2)
                        infotext = "%s is dead or has failures" % ( item )
                    elif PSUstatus == "4":
                        state = max(state,1)
                    elif PSUstatus == "1" or PSUstatus == "2":
                        state = 3
                    else:
                        state = 0
                        infotext = "%s is running on %s volts and with %d Watts." \
                                    % (item, PSUvoltage, Watts)
                    perfdata = [ ("Watts", str(Watts)+"w", 0 ), ( "voltage", str(PSUvoltage)+"v", 0 ) ]
                    tries.append([workmode, (state, infotext, perfdata)])

    except KeyError:
        return 3, "item not present anymore", []

    # its possible that amperageProbe_info elements are not in the same order as the powerSupply_info elements,
    # so we have to filter the comparisations from above on the highest workmode
    workmode, ret = max(tries, key=lambda item: item[0])
    return ret

    return 3, "unknown power supply"

check_info["dell_idrac_powersupplies"] = {
    "check_function"        : check_dell_idrac_powersupplies,
    "inventory_function"    : inventory_dell_idrac_powersupplies,
    "service_description"   : "PSU %s",
    "has_perfdata"          : True,
    "snmp_info"             : [
      ( ".1.3.6.1.4.1.674.10892.5.4.600.12.1", [
        "1", # amperageProbechassisIndex
        "2", # amperageProbeIndex
        "5", # powerSupplyStatus
        "8", # powerSupplyLocationName
        "16", # Volt 2
      ]),
      ( ".1.3.6.1.4.1.674.10892.5.4.600.30.1", [
        "6", # amperageProbeReading
        "7", # amperageProbeType
        "8", # amperageProbeLocationName
      ]),
    ],
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == ".1.3.6.1.4.1.674.10892.5",
}
